```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Primary Object Cropper</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }
        h1 {
            color: #333;
            text-align: center;
            margin-bottom: 20px;
        }
        .upload-section {
            border: 2px dashed #aaa;
            border-radius: 8px;
            padding: 30px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s;
            margin-bottom: 20px;
        }
        .upload-section:hover {
            background-color: #f0f8ff;
            border-color: #4d90fe;
        }
        .preview-section {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            margin-top: 20px;
        }
        .image-container {
            flex: 1;
            min-width: 300px;
        }
        canvas {
            max-width: 100%;
            border: 1px solid #ddd;
            border-radius: 4px;
            display: block;
        }
        button {
            padding: 10px 20px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: bold;
            transition: background-color 0.3s;
            margin: 10px 0;
        }
        button:hover {
            background-color: #45a049;
        }
        button:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
        }
        .progress-container {
            width: 100%;
            height: 20px;
            background-color: #e0e0e0;
            border-radius: 10px;
            overflow: hidden;
            margin: 10px 0;
            display: none;
        }
        .progress-bar {
            height: 100%;
            background-color: #4CAF50;
            width: 0%;
            transition: width 0.3s;
        }
        .controls {
            display: flex;
            gap: 15px;
            align-items: center;
            flex-wrap: wrap;
        }
        .control-group {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }
        label {
            font-weight: bold;
        }
        select {
            padding: 8px;
            border-radius: 4px;
            border: 1px solid #ddd;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Primary Object Cropper</h1>
        <p>Upload an image with overlapping objects (e.g., hand over face) to extract the primary object</p>
        
        <div id="dropArea" class="upload-section">
            <p>Drag and drop an image here or click to browse</p>
            <input type="file" id="fileInput" accept="image/*" style="display: none;">
        </div>
        
        <div class="controls">
            <div class="control-group">
                <label for="objectType">Primary Object Type:</label>
                <select id="objectType">
                    <option value="face">Face</option>
                    <option value="person">Person</option>
                    <option value="hand">Hand</option>
                </select>
            </div>
            
            <button id="processBtn" disabled>Process Image</button>
        </div>
        
        <div class="progress-container" id="progressContainer">
            <div class="progress-bar" id="progressBar"></div>
        </div>
        
        <div class="preview-section">
            <div class="image-container">
                <h3>Original Image</h3>
                <canvas id="originalCanvas"></canvas>
            </div>
            <div class="image-container">
                <h3>Cropped Object</h3>
                <canvas id="resultCanvas"></canvas>
            </div>
        </div>
    </div>

    <!-- Load TensorFlow.js and COCO-SSD model -->
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@3.18.0/dist/tf.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow-models/coco-ssd@2.2.2"></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const fileInput = document.getElementById('fileInput');
            const dropArea = document.getElementById('dropArea');
            const originalCanvas = document.getElementById('originalCanvas');
            const resultCanvas = document.getElementById('resultCanvas');
            const processBtn = document.getElementById('processBtn');
            const progressContainer = document.getElementById('progressContainer');
            const progressBar = document.getElementById('progressBar');
            const objectTypeSelect = document.getElementById('objectType');
            
            let model = null;
            let image = null;
            let originalCtx = originalCanvas.getContext('2d');
            let resultCtx = resultCanvas.getContext('2d');
            
            // Initialize TensorFlow.js model
            async function loadModel() {
                progressContainer.style.display = 'block';
                progressBar.style.width = '0%';
                
                try {
                    updateProgress(30, "Loading object detection model...");
                    model = await cocoSsd.load();
                    updateProgress(100, "Model loaded successfully!");
                    
                    setTimeout(() => {
                        progressContainer.style.display = 'none';
                    }, 1000);
                    
                    console.log("Model loaded successfully");
                } catch (error) {
                    console.error("Error loading model:", error);
                    alert("Error loading object detection model. Please try again.");
                    progressContainer.style.display = 'none';
                }
            }
            
            // Load model when page loads
            loadModel();
            
            // Handle file selection
            dropArea.addEventListener('click', () => fileInput.click());
            dropArea.addEventListener('dragover', (e) => {
                e.preventDefault();
                dropArea.style.backgroundColor = '#f0f8ff';
                dropArea.style.borderColor = '#4d90fe';
            });
            dropArea.addEventListener('dragleave', () => {
                dropArea.style.backgroundColor = '';
                dropArea.style.borderColor = '#aaa';
            });
            dropArea.addEventListener('drop', (e) => {
                e.preventDefault();
                dropArea.style.backgroundColor = '';
                dropArea.style.borderColor = '#aaa';
                if (e.dataTransfer.files.length) {
                    fileInput.files = e.dataTransfer.files;
                    handleFileSelect();
                }
            });
            fileInput.addEventListener('change', handleFileSelect);
            
            function handleFileSelect() {
                if (fileInput.files && fileInput.files[0]) {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        image = new Image();
                        image.onload = function() {
                            drawOriginalImage();
                            processBtn.disabled = false;
                        };
                        image.onerror = function() {
                            alert('Error loading image');
                        };
                        image.src = e.target.result;
                    };
                    reader.readAsDataURL(fileInput.files[0]);
                }
            }
            
            function drawOriginalImage() {
                const maxWidth = 600;
                const maxHeight = 600;
                let width = image.width;
                let height = image.height;
                
                if (width > maxWidth) {
                    const ratio = maxWidth / width;
                    width = maxWidth;
                    height = height * ratio;
                }
                
                if (height > maxHeight) {
                    const ratio = maxHeight / height;
                    height = maxHeight;
                    width = width * ratio;
                }
                
                originalCanvas.width = width;
                originalCanvas.height = height;
                resultCanvas.width = width;
                resultCanvas.height = height;
                
                originalCtx.drawImage(image, 0, 0, width, height);
                resultCtx.clearRect(0, 0, resultCanvas.width, resultCanvas.height);
            }
            
            // Process button click handler
            processBtn.addEventListener('click', async function() {
                if (!image || !model) return;
                
                processBtn.disabled = true;
                progressContainer.style.display = 'block';
                progressBar.style.width = '0%';
                
                try {
                    updateProgress(10, "Detecting objects...");
                    
                    // Detect objects in the image
                    const predictions = await model.detect(originalCanvas);
                    console.log("Detected objects:", predictions);
                    
                    updateProgress(60, "Processing results...");
                    
                    // Filter predictions based on selected object type
                    const targetClass = objectTypeSelect.value;
                    let targetObjects = predictions.filter(pred => pred.class === targetClass);
                    
                    // If no objects of the selected type found, try to find similar
                    if (targetObjects.length === 0) {
                        if (targetClass === 'face') {
                            targetObjects = predictions.filter(pred => pred.class === 'person');
                        } else if (targetClass === 'person') {
                            targetObjects = predictions.filter(pred => pred.class === 'face');
                        }
                    }
                    
                    if (targetObjects.length === 0) {
                        throw new Error(`No ${targetClass} detected in the image`);
                    }
                    
                    // Find the primary object (largest area)
                    let primaryObject = targetObjects[0];
                    let maxArea = calculateArea(primaryObject.bbox);
                    
                    for (let i = 1; i < targetObjects.length; i++) {
                        const currentArea = calculateArea(targetObjects[i].bbox);
                        if (currentArea > maxArea) {
                            primaryObject = targetObjects[i];
                            maxArea = currentArea;
                        }
                    }
                    
                    updateProgress(80, "Cropping object...");
                    
                    // Crop the primary object
                    cropObject(primaryObject.bbox);
                    
                    updateProgress(100, "Done!");
                    
                    setTimeout(() => {
                        progressContainer.style.display = 'none';
                    }, 1000);
                    
                } catch (error) {
                    console.error("Error processing image:", error);
                    alert(error.message || "Error processing image");
                    progressContainer.style.display = 'none';
                } finally {
                    processBtn.disabled = false;
                }
            });
            
            function calculateArea(bbox) {
                return bbox[2] * bbox[3]; // width * height
            }
            
            function cropObject(bbox) {
                const [x, y, width, height] = bbox;
                
                // Create a temporary canvas to hold the cropped image
                const tempCanvas = document.createElement('canvas');
                tempCanvas.width = width;
                tempCanvas.height = height;
                const tempCtx = tempCanvas.getContext('2d');
                
                // Draw the cropped portion
                tempCtx.drawImage(
                    originalCanvas,
                    x, y, width, height, // source rectangle
                    0, 0, width, height  // destination rectangle
                );
                
                // Clear the result canvas
                resultCtx.clearRect(0, 0, resultCanvas.width, resultCanvas.height);
                
                // Draw the cropped image centered on the result canvas
                const scale = Math.min(
                    (resultCanvas.width * 0.9) / width,
                    (resultCanvas.height * 0.9) / height
                );
                
                const scaledWidth = width * scale;
                const scaledHeight = height * scale;
                const offsetX = (resultCanvas.width - scaledWidth) / 2;
                const offsetY = (resultCanvas.height - scaledHeight) / 2;
                
                resultCtx.drawImage(
                    tempCanvas,
                    0, 0, width, height,
                    offsetX, offsetY, scaledWidth, scaledHeight
                );
            }
            
            function updateProgress(percent, message) {
                progressBar.style.width = `${percent}%`;
                progressBar.textContent = message;
            }
        });
    </script>
</body>
</html>
```
